%{
use strict;
use Carp;
use warnings;
use Data::Dumper;
use IO::File;
use Semantic::Analysis;

my $debug = 1;
my %reserved = (
  int => "INT",
  long => "LONG",
  if => "IF",
  else => "ELSE",
  break => "BREAK",
  continue => "CONTINUE",
  return => "RETURN",
  while => "WHILE"
);

my %lexeme = (
  '='=> "ASSIGN",
  '+' => "PLUS",
  '-' => "MINUS",
  '*' => "TIMES",
  '/' => "DIV",
  '%' => "MOD",
  '|' => "OR",
  '&' => "AND",
  '{' => "LEFTKEY",
  '}' => "RIGHTKEY",
  ',' => "COMMA",
  ';' => "SEMICOLON",
  '(' => "LEFTPARENTHESIS",
  ')' => "RIGHTPARENTHESIS",
  '[' => "LEFTBRAQUET",
  ']' => "RIGHTBRAQUET",
  '==' => "EQUAL",
  '+=' => "PLUSASSIGN",
  '-=' => "MINUSASSIGN",
  '*=' => "TIMESASSIGN",
  '/=' => "DIVASSIGN",
  '%=' => "MODASSIGN",
  '!=' => "NE",
  '<' => "LT",
  '>' => "GT",
  '<=' => "LE",
  '>=' => "GE",
  '++' => "INC",
  '--' => "DEC",
  '**' => "EXP"
);

our $numlineas = 1; 
our $prueba = "";
our $cadena ="";
our $fhi;
our $entrado;
our $erro = 0;
our @ST;
our $numtablas = 0;
our $symbol_table;
our $borra = 0;

sub check_declared {
  my $id = shift;
  my($existe,$type,$tabla) = existe($id);
  if ($existe == 0) {
     die("$id no ha sido declarado\n");
  }
  return ($type,$tabla);
}

sub set_types {
  my $type = shift;
  my @vars = @_;

  foreach my $var (@vars) {
    if (!exists($symbol_table->{$var->{VAL}})) {$symbol_table->$var->{VAL}}->{TYPE} = $type;}
    else { die("$var->{VAL} se ha declarado dos veces en el mismo ambito\n");}
  }
}

sub new_block {
  my %tabla;
  push @ST,\%tabla;
  $numtablas = @ST;
  $symbol_table = $ST[$numtablas - 1];
  print "Creo una tabla\n";
  #return $numtablas;
}


sub delete_block {
  pop @ST;
  if ($borra == 1) {
     pop @ST;
     print "He borrado otra tabla de simbolos\n";
  }
  $numtablas = @ST;
  $symbol_table = $ST[$numtablas - 1];
  print "Borro una tabla\n";
  $borra = 0;
  return $numtablas;
}
		

sub existe {
   my $id = shift;
	  my @TS;
		 my $tabla;
			while (0 < @ST) {
				  if (!exists($symbol_table->{$id})) {
						   if ($numtablas > 1) {
									   push @TS,pop @ST;
												$numtablas = @ST;
												$symbol_table = $ST[$numtablas - 1];
									}
									else {
												while (0 < @TS) {
															push @ST,pop @TS;
												}
												$numtablas = @ST;
												$symbol_table = $ST[$numtablas - 1];
												return 0;
									}
					 }
					 else {
									my $type = $symbol_table->{$id}->{TYPE};
									$tabla = $symbol_table;
									while (0 < @TS) {
								    push @ST,pop @TS;
									}
									$numtablas = @ST;
								 $symbol_table = $ST[$numtablas - 1];
									return (1,$type,$tabla);
					 }
	  }
}


%}

<<<<<<< .mine
%tree

=======

%nonassoc WEAK
%nonassoc '(' '['
%nonassoc '.'
>>>>>>> .r539
%right '=' '+=' '-=' '*=' '/=' '%='
%left '|'
%left '&'
%left '==' '!='
%left '<' '>' '>=' '<='
%left '+' '-'
%left '*' '/' '%'
%right '**'
%right '++' '--'
%right 'ELSE'

%tree

%%
program: 
    definition %name PROGRAM + 				{ $_[1] }
;

definition:
    funcDef 						{ $_[1]->type("INTFUNC"); $_[1] }
  | %name TYPEDFUNC
    type funcDef  { $_[2]->type($_[1]); $_[2] }
  | declaration 					{ $_[1] }
;

type:
    %name INT 
    INT
  | %name LONG 
    LONG
;

funcDef:
    %name FUNCTION
    ID '('  param <%name PARAMS * ','> ')' 
      block
;

param: 
    %name PARAM
    basictype ID arraySpec
;

block:
    %name BLOCK
    '{' declaration %name DECLARATIONS * statement %name STATEMENTS * '}'
;

declaration:
    %name DECLARATION
    $type $declList ';'					{ $decList->{type} = $type; $declList }
;

declList:
    (ID arraySpec) <%name VARLIST + ','> 		{ $_[1] } 
;

arraySpec:
    ('[' INUM ']')* 					{ $_[1]->type("ARRAYSPEC"); $_[1] }
;

statement:
    expression ';' 					{ $_[1] }
  | ';'
  | %name BREAK
    BREAK ';'
  | %name CONTINUE
     CONTINUE ';'
  | %name EMPTYRETURN
    RETURN ';'
  | %name RETURN
     RETURN expression ';'
  | block 						{ $_[1] }
  | %name IF
    ifPrefix statement %prec '+'
  | %name IFELSE
    ifPrefix statement 'ELSE' statement
  | %name WHILE
    loopPrefix statement
;

ifPrefix:
    IF '(' expression ')' { $_[3] }
;

loopPrefix:
    WHILE '(' expression ')' { $_[3] }
;

expression:
    binary <+ ','> 
      							{ 
      							  return $_[1]->child(0) if ($_[1]->children() == 1); 
      							  return $_[1];
      							}
;

Variable:
    %name VAR
    ID  %prec WEAK                          {&checkdeclared($_[1][1]); $_[1]}
  | %name  VARARRAY
    ID ('[' binary ']')+                    {&checkdeclared($_[1][1]); $_[1]}
;

Primary:
    %name INUM
    INUM 
  | Variable %prec WEAK { $_[1] }
  | '(' expression ')' { $_[2] }
  | %name 
    FUNCTIONCALL
    ID '(' binary <%name ARGLIST * ','> ')' {&checkdeclared($_[1]->[2][1]); $_[1]}
;
    
Unary:
    '++' Variable
  | '--' Variable
  | Primary { $_[1] }
;

binary:
    Unary { $_[1] }
  | %name PLUS
    binary '+' binary		{
    				                 my $self = shift;
				                     my $node = $self->YYBuildAST(@_);
				                     $node->{LEFT} = $_[1];
				                     $node->{RIGHT} = $_[3];
				                     return $node;
				                   }
  | %name MINUS
    binary '-' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name TIMES
    binary '*' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name DIV
    binary '/' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name MOD
    binary '%' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name LT
    binary '<' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name GT
    binary '>' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name GE
    binary '>=' binary {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name LE
    binary '<=' binary {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name EQUAL
    binary '==' binary {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name NE
    binary '!=' binary {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name AND
    binary '&' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name EXP
    binary '**' binary {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{BASE} = $_[1];
																									$node->{EXP} = $_[3];
																									return $node;
																						 }
  | %name OR
    binary '|' binary  {
				                     my $self = shift;
																									my $node = $self->YYBuildAST(@_);
																									$node->{LEFT} = $_[1];
																									$node->{RIGHT} = $_[3];
																									return $node;
																						 }
  | %name ASSIGN
    Variable '=' binary
  | %name PA
    Variable '+=' binary
  | %name MA
    Variable '-=' binary
  | %name TA
    Variable '*=' binary
  | %name DA
    Variable '/=' binary
  | %name RA
    Variable '%=' binary
;

%%

sub _Error {
  my($token)=$_[0]->YYCurval;
  my($what)= $token ? "input: '$token->[0]'" : "end of input";
  my @expected = $_[0]->YYExpect();

  die "Syntax error near $what in line $token->[1]. Expected one of these tokens: @expected\n";
}


sub _Lexer {
  my($parser)=shift;

  for ($parser->YYData->{INPUT}) {
      return('',undef) if !defined($_) or $_ eq '';

      #Skip blanks
      s{\A
         ((?:
              \s+       # any white space char
          |   /\*.*?\*/ # C like comments
          )+
         )
       }
       {}xs
      and do {
            my($blanks)=$1;

            #Maybe At EOF
            return('', undef) if $_ eq '';
            $tokenend += $blanks =~ tr/\n//;
        };

     $tokenbegin = $tokenend;

      s/^([0-9]+(?:\.[0-9]+)?)//
              and return('INUM',[$1, $tokenbegin]);

      s/^([A-Za-z][A-Za-z0-9_]*)//
        and do {
          my $word = $1;
          my $r;
          return ($r, [$r, $tokenbegin]) if defined($r = $reserved{$word});
          return('ID',[$word, $tokenbegin]);
      };

      s/^(\S)//
        and do {
          my $token1 = $1;
          m{^(\S)};
          my $token2 = $2;
          
          my $ltoken = defined($token2)?"$token1$token2":$token1;
          if (exists($lexeme{$ltoken})) {
            s/^.// if length($ltoken) > 1;
            return ($ltoken, [$ltoken, $tokenbegin]);
          }

          croak "Error. Unexpected token $ltoken\n";
        }; # do
  } # for
}

sub Run {
    my($self)=shift;
    { 
      local $/ = undef;
      $self->YYData->{INPUT} = <>;
    }
    $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error, #yydebug => 0x1F 
    );
}

