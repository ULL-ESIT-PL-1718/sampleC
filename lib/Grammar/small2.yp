%{
use IO::File;
use Data::Dumper;
use Carp;
our $reserved = {
	INT => "int", 
	STRING => "string", 
	IF => "if", 
	ELSE => "else",
	BREAK => "break",
	CONTINUE => "continue",
	PRINT => "print",
	WHILE => "while", 
	RETURN => "return"};
	
our $lexema = { 
	'=' => "ASSIGN", 
	'==' => "EQUAL", 
	'!=' => "NOTEQUAL", 
	'&' => "AND",
	'|' => "OR", 
	',' => "COMMA", 
	'[' => "LEFTBRACKET", 
	']' => "RIGHTBRACKET", 
	'{' => "LEFTKEY", 
	'}' => "RIGHTKEY",
	'(' => "LEFTPARENTHESIS", 
	')' => "RIGHTPARENTHESIS", 
	'<=' => "LESSTHAN",
	'<' => "LESS", 
	'>' => "GREATER", 
	'>=' => "GREATERTHAN", 
	'+=' => "PLUSASSIGN",
	'-=' => "MINUSASSIGN",
	'*=' => "TIMESASSIGN",
	'/=' => "DIVASSIGN",
	'%=' => "MODASSIGN",
	'+' => "PLUS", 
	'-' => "MINUS", 
	'*' => "TIMES", 
	'/' => "DIV",
	'%' => "MOD",
	'**' => "EXP",
	'++' => "INC",
	'--' => "DEC", 
	';' => "SEMICOLON"};
	
our $numlineas = 1;
our $prueba = "";
our $cadena ="";
our $fhi;
our $entrado;
our $erro = 0;
our $debug = 0;
our @ST;
our $numtablas = 0;
our $symbol_table;
our $borra = 0;
our @localvar =();
our @stscode =();
our $scope=0;
$Data::Dumper::Indent = 1;
$Data::Dumper::Deepcopy = 1;
#======================================================================
# Variables para la generacion de codigo
#======================================================================
our $header ="";				# Cabecera de funcion
our $body ="";					# Cuerpo de la funcion
our $code="";					# Codigo global
our $ifcode="";					# Codigo if
our $elsecode="";				# Codigo else
our @labelstack = ();				# Pila de etiquetas

#======================================================================
# Comprueba que un identificador este o no declarado
#======================================================================

sub check_declared {
  my $id = shift;
  my($existe,$type,$tabla) = existe($id);
  if ($existe == 0) {
    die("$id no ha sido declarado\n");
  }
  return ($type,$tabla);
}


#======================================================================
# Subrutina que crea una entrada en la tabla de simbolos para
# cada identificador en @vars con tipo $type
#======================================================================

sub set_types {
  my $type = shift;
  my @vars = @_;

	
  foreach my $var (@vars) {
    if (!exists($symbol_table->{$var->{VAL}})) { $symbol_table->{$var->{VAL}}->{TYPE} = $type; }
    else { die("$var->{VAL} se ha declarado dos veces en el mismo ambito\n"); }
  }
}


#======================================================================
# Subrutina que crea una nueva tabla de simbolos, y la establece
# como predefinida
#======================================================================

sub new_block {
  my %tabla;
  push @ST,\%tabla;
  $numtablas = @ST;
  $symbol_table = $ST[$numtablas - 1];
  #return $numtablas;
}

#======================================================================
# Subrutina que elimina la ultima tabla de simbolos, y establece
# como predefinida la tabla anterior
#======================================================================

sub delete_block {
  pop @ST;
	if ($borra == 1) {
		pop @ST;
	}
  $numtablas = @ST;
  $symbol_table = $ST[$numtablas - 1];
	$borra = 0;
  return $numtablas;
}


#======================================================================
# Subrutina que comprueba que un identificador ha sido declarado
# en este ambito o en uno de los anteriores
#======================================================================

sub existe {
        my $id = shift;
        my @TS;
        my $tabla;
        while (0 < @ST) {
                if (!exists($symbol_table->{$id})) {
                        if ($numtablas > 1) {
                                push @TS,pop @ST;
                                $numtablas = @ST;
                                $symbol_table = $ST[$numtablas - 1];
                        }
                        else {
                                while (0 < @TS) {
                                        push @ST,pop @TS;
                                }
                                $numtablas = @ST;
                                $symbol_table = $ST[$numtablas - 1];
                                return 0;
                        }
                }
                else {
                        my $type = $symbol_table->{$id}->{TYPE};
                        $tabla = $symbol_table;
                        while (0 < @TS) {
                                push @ST,pop @TS;
                        }
                        $numtablas = @ST;
                        $symbol_table = $ST[$numtablas - 1];
                        return (1,$type,$tabla);
                }
        }
}

#======================================================================
# Subrutina que vuelca el codigo de un conjunto de statement y enlaza
# el codigo de todos ellos en un string y lo devuelve
#======================================================================
sub stscode {
	my $body = "";
	foreach my $code (@stscode) {
		$body = $code . "\n" . $body;
	}
	@stscode = ();
	return $body;
}

#======================================================================
# Subrutina que vuelca el codigo de un conjunto de statement y enlaza
# el codigo de todos ellos en un string y lo devuelve
#======================================================================
sub datadefcode {
	my $data = "";
	foreach my $code (@localvar) {
		$data .= $code;
	}
	@localvar = ();
	if ($data != "") {
		$data = "local " . $data;
	}
	return $data;
}


%}

%nonassoc '(' '['
%right '=' '+=' '-=' '*=' '/=' '%='
%left '&' 
%left '|'
%left '==' '!='
%left '<' '>' '>=' '<='
%left '-' '+'
%left '*' '/' '%'
%right '**'
%right '++' '--'
%right 'ELSE'
%%

dibujar:	
		program					{
							   (($erro == 0) && ($debug == 1))
							   ? print Dumper($_[1])
							   :print $code
							}
;

program :	
		definitions				{bless [$_[1]],'program'}
	|	definitions program			{push @{$_[2]}, $_[1]; $_[2]}
;

definitions: 	
		datadefinition				{bless {DATADEFINITION => $_[1]},'definitions'}
	|    	functiondefinition			{bless {FUNCTIONDEFINITION => $_[1]}, 'definitions'}
;

datadefinition:	
		basictype  declaratorlist ';'		{
							   &set_types($_[1],@{$_[2]});
						 	   bless {TYPE => $_[1],DECLARATORLIST => $_[2]},'datadefinition'
							}
	|	error ';'				{$_[0]->YYErrok ; print "Me he recuperado del error\n"}
;

declaratorlist:	
		declarator				{bless [$_[1]->{VAL}],'declaratorlist'}
	|	declarator ',' declaratorlist		{push @{$_[3]}, $_[1]->{VAL}; $_[3]}
;

declarator:	
		'ID' constantexplist			{
							   $_[1]->{SYMTABLE} = $symbol_table;
							   if ($scope == 1) {
							   	push @localvar, "$_[1]->{VAL}";
							   }
							   bless {VAL => $_[1], CONSTANTEXPLIST => $_[2]}, 'declarator'
							} 
;

constantexplist:
		/* empty */				{bless [],'constantexplist'}
	|	'[' constantexp ']' constantexplist 	{push @{$_[4]}, $_[2]; $_[4]}
;

functiondefinition:
		basictype functionheader functionbody	{
							   $body .= ".end\n\n";
							   if (@localvar > 0) {
							   	$header .= " .local @localvar\n";
							   }
							   $code .= "$header" . "$body";
							   $header = $body = "";
							   @localvar = ();
							   &set_types($_[1],$_[2]->{ID}); 
							   $_[2]->{ID}->{SYMTABLE} = $symbol_table;
							   bless {TYPE => $_[1], HEADER => $_[2], BODY => $_[4]}, 
							   'functiondefinition'
							}
	|	functionheader functionbody		{
							   $body .= ".end\n\n";
							   if (@localvar > 0) {
							   	$header .= " .local @localvar\n";
							   }
							   $code .= "$header" . "$body";
							   $header = $body = "";
							   @localvar = ();
							   &set_types('void',$_[1]->{ID}); 
							   $_[1]->{ID}->{SYMTABLE} = $symbol_table;
							   bless {HEADER => $_[1], BODY => $_[2]}, 'functiondefinition'
							}
;

basictype:	
		'INT'					{bless {TYPE => 'int'},'basictype'}
	|	'STRING'				{bless {TYPE => 'string'},'basictype'}
;

functionheader:	
		'ID' '(' ')'				{
							   $header .=".sub $_[1]->{VAL}\n";
							   bless {ID => $_[1]},'functionheader'; 
							}
	|	'ID' '(' 				{
							   $header .=".sub $_[1]->{VAL}\n";
							   $borra = 1; &new_block
							} 
		parameters')'				{bless {ID => $_[1], PARAMETERS => $_[4]}, 'functionheader'}
;

parameters:
		basictype declarator			{
							   $body .=" .param $_[1]->{TYPE} $_[2]->{VAL}->{VAL}\n";
							   &set_types($_[1],$_[2]->{VAL});
							   bless [{TYPE => $_[1], DECLARATOR => $_[2]}], 'parameters'
							}
	|	basictype declarator ',' parameters  	{
							   $body .=" .param $_[1]->{TYPE} $_[2]->{VAL}->{VAL}\n";
							   &set_types($_[1],$_[2]->{VAL});
							   push @{$_[4]}, {TYPE => $_[1], DECLARATOR => $_[2]}; 
							   $_[4]
							}
;

functionbody:
		'{'					{$scope = 1;} 
		datadefs 				{$scope = 0;}
		sts '}'					{
							   bless {DATADEFS => $_[3], STS => $_[5],
							   	  CODE => stscode() }, 
						           'functionbody'
							}
;

datadefs:
		/* empty */				{bless [],'datadefs'}
	|	datadefinition datadefs			{push @{$_[2]},$_[1]; $_[2]}
;

sts:
		/* empty */				{bless [], 'sts'}
	|	statement sts				{push @stscode,$_[1]->{CODE};push @{$_[2]},$_[1]; $_[2]}
;

statement:
		';'					{;}	
	|	exp ';'	
	| 	error	
	|	functionbody
	|	'PRINT' lvalue				{
							   bless {VAL => $_[2], CODE => "print $_[2]->{CODE}"}, 'PRINT'
							}
	|	'IF'					 
		'(' exp ')' statement %prec '+'		{
							   bless {EXP => $_[3], STATEMENT => $_[5]}, 'IF'
							}
	|	'IF'			 
		'(' exp ')' 			
		statement 
		'ELSE' statement 			{bless {EXP => $_[3], STATEMENT => $_[5], ELSE => $_[7]}, 'IF'}
	|	'WHILE' '(' exp ')' statement		{bless {EXP => $_[3], STATEMENT => $_[5]}, 'WHILE'}
	|	'RETURN' ';'				{bless {CODE => "return"}, 'RETURN'}
	|	'RETURN' exp ';'			{
							   bless {EXP => $_[2], CODE => "return ($_[2]->{CODE})"}, 
							   'RETURN'
							}
;

constantexp:
		exp
;

exp:
		lvalue '=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} = $_[3]->{CODE}"},
							   'ASSIGN'
							}
	|	lvalue '+=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} += $_[3]->{CODE}"},
						  	   'PLUSASSIGN'
							}
	|	lvalue '-=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} -= $_[3]->{CODE}"},
							   'MINUSASSIGN'
							}
	|	lvalue '*=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} -= $_[3]->{CODE}"},
							   'TIMESASSIGN'
							}
	|	lvalue '/=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "S_[1]->{CODE} /= $_[3]->{CODE}"},
						           'DIVASSIGN'
							}
	|	lvalue '%=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} %= $_[3]->{CODE}"}, 
							   'MODASSIGN'
							}
	|	exp '&' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							   	  CODE => "$_[1]->{CODE} & $_[3]->{CODE}"}, 
							   'AND'
							}
	|	exp '|' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} | $_[3]->{CODE}"}, 
							   'OR'
							}
	|	exp '==' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "S_[1]->{CODE} == $_[3]->{CODE}"}, 
							   'EQUAL'
							}
	|	exp '!=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} != $_[3]->{CODE}"}, 
							   'NOTEQUAL'
							}
	|	exp '<' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} < $_[3]->{CODE}"}, 
						    	   'LESS'
							}
	|	exp '>' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} > $_[3]->{CODE}"}, 
							   'GREATER'
							}
	|	exp '<=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} <= $_[3]->{CODE}"}, 
							   'LESSTHAN'
							}
	|	exp '>=' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} >= $_[3]->{CODE}"}, 
							   'GREATERTHAN'
							}
	|	exp '+' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} + $_[3]->{CODE}"}, 
							   'PLUS'
							}
	|	exp '-' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} - $_[3]->{CODE}"}, 
							   'MINUS'
							}
	|	exp '*' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} * $_[3]->{CODE}"}, 
							   'MULT'} 
	|	exp '/' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} / $_[3]->{CODE}"}, 
							   'DIV'
							}
	|	exp '%' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} % $_[3]->{CODE}"}, 
							   'MOD'
							}
	|	exp '**' exp				{ 
							   bless {LEFT => $_[1], RIGHT => $_[3],
							          CODE => "$_[1]->{CODE} ** $_[3]->{CODE}"}, 
							   'EXP'
							}
	| 	unary
;

unary:
		'++' lvalue				{ bless {VAL => $_[2], CODE => "inc $_[2]->{CODE}"}, 'INC'}
	|	'--' lvalue				{ bless {VAL => $_[2], CODE => "dec $_[2]->{CODE}"}, 'DEC'}
	| 	primary
;

primary:
		'(' exp ')'				{$_[2]}
	|	'ID' '(' ')'				{&check_declared($_[1]->{VAL}); $_[1]}
	|	'ID' '(' argumentlist ')' 		{
							   &check_declared($_[1]->{VAL});
							   bless {ID => $_[1], ARGUMENTS => $_[3]}, 'primary'
							}
	|	lvalue				
	|	'NUM'					{ bless {CODE => "$_[1]->{VAL}"},'primary' }
	|	'STR'					{ bless {CODE => "\"$_[1]->{VAL}\""},'primary' }
;

lvalue:	
		'ID' explist				{
							   &check_declared($_[1]->{VAL});
							   bless {ID => $_[1], LIST => $_[2], CODE => "$_[1]->{VAL}"}, 
							   'lvalue'
							}
;

explist:
		/* empty */				{bless [],'explist'}
	|	'[' exp ']' explist			{push @{$_[4]},$_[2];$_[4]}
;

argumentlist:
		exp	                 		{bless [$_[1]], 'argumentlist'}
	|   exp ',' argumentlist			{push @{$_[3]}, $_[1]; $_[3]}
;

%%	

sub _Error {
         exists $_[0]->YYData->{ERRMSG}
     and do {
         print $_[0]->YYData->{ERRMSG};
         delete $_[0]->YYData->{ERRMSG};
         return;
     };
		 $erro = 1;
     print "Syntax error en la linea $numlineas\n";
 }

sub _Lexer {
     my ($parser)=shift;
		 if ($entrado == 0) {
				if ($cadena and (-r $cadena)) {
    			$fhi = IO::File->new("< $cadena");
  			}
  			else { $fhi = 'STDIN'; }
				new_block;
				$entrado = 1;
		 }
		 local $/ = undef;
         $parser->YYData->{INPUT}
     or  $parser->YYData->{INPUT} = <$fhi>
     or  return('',undef);
	
     $parser->YYData->{INPUT}=~s/^[ \t]+//;


		 my $cnt;	
		 for ($parser->YYData->{INPUT}) {
				 s/^(\n)+// 
						and $cnt = $& =~ tr/\n/\n/
						and $numlineas += $cnt;
    		
				 s/^[ \t]+//;

		 		 s/^(\/\*.*?\*\/)//s
						and $cnt = $& =~ tr/\n/\n/
						and $numlineas += $cnt;
			
				 s/^(\n)+//
						and $cnt = $& =~ tr/\n/\n/
						and $numlineas += $cnt;

				 s/(^[ \t]+)?//;

				 s/^([0-9]+(?:\.[0-9]+)?)//
            					and return('NUM',(bless{VAL => $1, LINEA => $numlineas},'NUM'));
         
				 s/^([A-Za-z][A-Za-z0-9_]*)//
				    		and (defined $reserved->{uc($1)})? 
						return (uc($1),(bless{VAL => $1, LINEA => $numlineas},uc($1))):
            					return ('ID',(bless{VAL => $1, LINEA => $numlineas},'ID'));
			
				 s/^(\'[A-Za-z]\')//
						and return ('CHARACTER',(bless{VAL => $1, LINEA => $numlineas},'STR'));
	
				 s/^(==|\!=|\+=|\+\+|\-\-|&&|\|\||<=|>=)//s
						and return ($1,(bless{NOMBRE =>$lexema->{$1}, LINEA => $numlineas},'PUNT'));
		
				 s/^(=|\(|\)|\[|\]|\{|\}|\+|-|\*\*|\*|\/|,|;|<|>)//s
						and ($1 eq '{')? &new_block : print ""
						and ($1 eq '}')? &delete_block : print""
						and return ($1,(bless{NOMBRE =>$lexema->{$1}, LINEA => $numlineas},'PUNT'));
     }
 }


sub Run {
     my($self)=shift;
     ($cadena) = @_;
     $entrado = 0;
     $debug = 0;
     $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error) #, yydebug => 0x10 );
     &delete_block;
 }


